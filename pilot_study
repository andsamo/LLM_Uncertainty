import pandas as pd
import numpy as np
import re
import random

# set API keys

# set prompts
instruction_prompt = """
                      # Instruction
                      You will be given challenging work situations. For each situation, you will be provided possible responses (a to d). Your job is to consider and
                      think through the work situation step-by-step and then choose the best and the worst responses from the possible options (a to d).
                      Self-evaluate your confidence in your response after you answer. Provide an output confidence estimate ranging from 0 to 100%.
                      Use the following output format:
                      ## Output Format
                      [full response goes here]
                      Confidence: XX%
                      Best Option: X
                      Worst Option: Y
                      """

sjt_items = [
              # item 1
              """ You are temporarily subjected to personal stress that also affects your occupational activity. A briefly acquainted colleague asks you about the reason for your decline in performance and offers help with your task. What should you do and not do in such a situation?\n\n
              a)	You confirm an increase in personal stress and accept the help.
              b)	You do not mention your personal problems, but accept the help.
              c)	You explain your specific situation and ask for help with your task.
              d)	You thank your colleague for the feedback but politely decline the offer.""",
              # item 2 ...3 ...n ... etc etc etc
             """
              ]

### RUN PILOT ###
### HUGGINGFACE API
### LLAMA 8B

# initialize
results_df = pd.DataFrame(columns=['response', 'logprobs', 'certainty', 'perplexity', 'avg_linear_prob', 'entropy'])

# set random seed
random.seed(514)

# loop API call
for sjt_item in sjt_items:
    seed_number = random.randint(1, 10000)
    completion = client.chat.completions.create(
        model="meta-llama/Meta-Llama-3-8B-Instruct", # need hf pro for 70B
        messages=[{"role": "system", "content": instruction_prompt},
                  {"role": "user", "content":f"""Work situation:{sjt_item}"""}],
        seed=seed_number,
        logprobs=True,
        top_logprobs = 3,
    )

    # extract response text
    response_text = completion.choices[0].message.content

    # identify certainty score
    certainty_match = re.search(r'Confidence:\s*(\d+)%', response_text)
    certainty = float(certainty_match.group(1)) if certainty_match else None

    # identify best and worst match
    best_match = re.search(r'Best Option:\s*([a-d])', response_text)
    worst_match = re.search(r'Worst Option:\s*([a-d])', response_text)

    # extract tokens
    token_logprobs = [lp.logprob for lp in completion.choices[0].logprobs.content]
    token_top_logprobs = [lp.top_logprobs for lp in completion.choices[0].logprobs.content]

    # calculate perplexity (np.exp(-np.mean(tokens_df['logprob'])))
    avg_logprob = np.mean(token_logprobs)
    perplexity = np.exp(-avg_logprob)

    # calc avg linear probability (tokens_df['probability'] = np.exp(tokens_df['logprob']))
    linear_probs = np.exp(token_logprobs)  # convert from log space to probability space
    avg_linear_prob = np.mean(linear_probs)

    # calc entropy (entropy = -np.sum([p * np.log2(p) for p in linear_probs if p > 0])
    # entropy = -np.sum([p * np.log2(p) for p in linear_probs if p > 0])
    entropy = 0
    for i in range(len(token_logprobs)):
        # Get all probabilities for this position (main token + alternatives)
        main_prob = np.exp(token_logprobs[i])
        alt_probs = [np.exp(alt.logprob) for alt in token_top_logprobs[i]]
        all_probs = [main_prob] + alt_probs

        # Calculate position entropy
        position_entropy = -np.sum([p * np.log2(p) for p in all_probs if p > 0])
        entropy += position_entropy

    # Average entropy over all positions
    entropy = entropy / len(token_logprobs)

    # create new rows
    new_row = pd.DataFrame({
        'response': [completion.choices[0].message.content],
        'logprobs': [completion.choices[0].logprobs],
        'certainty': [certainty],
        'perplexity': [perplexity],
        'avg_linear_prob': [avg_linear_prob],
        'entropy': [entropy]
    })

    # Append to results
    results_df = pd.concat([results_df, new_row], ignore_index=True)

    print(completion.choices[0].message.content)
    print("\n### NEXT ITEM ###\n")
